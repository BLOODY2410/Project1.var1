.model small                  ; Встановлення малої моделі пам'яті
.stack 100h                   ; Виділення 256 байт під стек

.data                         ; Секція даних
    res db 6 dup('$')         ; Буфер для зберігання рядкового представлення чисел, ініціалізований символами '$'
    ocuranse dw 100 dup(0)    ; Масив для зберігання кількості входжень підстрічки
    string_length db 0        ; Змінна для зберігання довжини поточної стрічки
    string db 255 dup(0)      ; Буфер для зберігання поточної стрічки, що читається з вводу
    substring db 255 dup(0)   ; Буфер для зберігання підстрічки, по якій ведеться пошук
    substring_length db 0     ; Змінна для зберігання довжини підстрічки
    ocuranse_length db 0      ; Змінна для зберігання кількості записів в масиві ocuranse

.code                         ; Секція коду
main PROC                     ; Основна процедура програми
    mov ax, @data             ; Встановлення сегменту даних для програми
    mov ds, ax
    mov ax, @data             ; Встановлення сегменту даних для програми
    mov ds, ax

    call read_argument        ; Виклик процедури читання аргументу командного рядка


read_line:                    ; Мітка для читання стрічки
    mov string_length, 0      ; Ініціалізація довжини стрічки

    
read_next:                    ; Мітка для читання наступного символу
    mov ah, 3Fh               ; Функція DOS для читання з файлу (або стандартного вводу)
    mov bx, 0h                ; Дескриптор стандартного вводу
    mov cx, 1                 ; Кількість байтів для читання
    mov dx, offset string     ; Вказівник на буфер стрічки
    add dl, string_length     ; Додавання поточної довжини стрічки до вказівника (для читання в кінець буфера)
    int 21h                   ; Виклик DOS-преривання для читання
    inc string_length         ; Збільшення лічильника довжини стрічки
    mov bx, dx
    cmp byte ptr [bx], 0Ah    ; Перевірка на символ нового рядка
    je count_ocuranse_substring ; Якщо знайдено, переходимо до підрахунку входжень
    or ax, ax
    jnz read_next             ; Якщо прочитано не нульову кількість байт, читаємо далі
    mov byte ptr [bx], 0      ; Якщо досягнуто кінця файлу, закінчуємо стрічку нуль-символом
    call count_ocuranse_substring_m ; Підрахунок входжень для останньої стрічки
    jmp output_ocuranse       ; Перехід до виведення результатів

    mov ah, 4Ch               ; Функція DOS для завершення програми
    int 21h                   ; Виклик DOS-преривання для завершення
main ENDP

end main
